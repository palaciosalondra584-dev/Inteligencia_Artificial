# -*- coding: utf-8 -*-
"""Operacion AND

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ujHs-vVm60orzic4fhnjYWB_dfiNzxmD
"""

##Importamos la biblioteca NumPy
import numpy as np
#Enatradas para la primer neurona
X = np.array([
              [0,0],
              [0,1],
              [1,0],
              [1,1]
])
#Salidas esperadas para la compuerta lógica AND
Y = np.array([0,0,0,1])
#Asignamos pesos para las entradas
W = [1,1]
#Umbral para la funcion de activacion
umbral = 2

class McCullochPitts:
    def __init__(self, weights, umbral):
        """
        Constructor de la neurona MPC
        Guardar las variables
        weights ->vector de pesos iniciales
        umbral ->umbral paraa usar la funcion de activacion
        """
        self.weights = weights
        self.umbral = umbral
    def predict(self, X):
        """
             Calcular las salida de las neuronas para cada fila
        """
        #Listas donde se guardaran las salidas (predicciones)
        predictions = []
        #Recorremos cada fila de entradas
        for i in range (X.shape [0]):
            #Caluculamos la suma ponderada : w1*x1 + w2*x2
            weighted_sum = np.dot(self.weights, X[i])
            #Mostramos en la consola la entrada y la suma
            print(f"Input: {X[i]}, Weighted Sum: {weighted_sum}")
            #Comparacion con el umbral determinar si la neurona se activa o no
            ## Aplicamos la función de activación (función escalón)
            # Si la suma ponderada es mayor o igual al umbral, la neurona se activa (1)
            # Si no, la salida es 0 (neurona no activada)
            if  weighted_sum >= self.umbral:
                predictions.append(1)
            else:
                predictions.append(0)
        return predictions

#Instanciamos la clase McCullochPitts
mcp = McCullochPitts(W, umbral)
#Calculamos las predicciones
predictions = mcp.predict(X)
#mostramos el resultado final
print ("predictions:", predictions)

from google.colab import drive
drive.mount('/content/drive')